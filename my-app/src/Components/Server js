
const express = require('express');
const passport = require('passport');
const passportJWT = require('passport-jwt');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());
app.use(cors());
app.use(passport.initialize());

const users = []; // In-memory user store, replace with a database in production
const secretKey = 'your_jwt_secret';

// Passport JWT strategy setup
const ExtractJwt = passportJWT.ExtractJwt;
const JwtStrategy = passportJWT.Strategy;

const jwtOptions = {
    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: secretKey
};

const strategy = new JwtStrategy(jwtOptions, (jwt_payload, done) => {
    const user = users.find(u => u.username === jwt_payload.username);
    if (user) {
        return done(null, user);
    } else {
        return done(null, false);
    }
});

passport.use(strategy);

// Register endpoint
app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    users.push({ username, password: hashedPassword });
    res.status(201).send('User registered');
});

// Login endpoint
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = users.find(u => u.username === username);
    if (user && await bcrypt.compare(password, user.password)) {
        const token = jwt.sign({ username: user.username }, secretKey, { expiresIn: '1h' });
        res.json({ token });
    } else {
        res.status(401).send('Invalid credentials');
    }
});

// Authenticated route
app.get('/user', passport.authenticate('jwt', { session: false }), (req, res) => {
    res.json({ username: req.user.username });
});

app.listen(4000, () => {
    console.log('Server running on port 4000');
});
