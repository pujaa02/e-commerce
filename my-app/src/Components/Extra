// src/context/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getCurrentUser } from '../services/authService';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [currentUser, setCurrentUser] = useState(null);

    useEffect(() => {
        const user = getCurrentUser();
        if (user) {
            setCurrentUser(user);
        }
    }, []);

    return (
        <AuthContext.Provider value={{ currentUser, setCurrentUser }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};



// src/components/Login.js
import React, { useState } from 'react';
import { login } from '../services/authService';
import { useAuth } from '../context/AuthContext';

const Login = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { setCurrentUser } = useAuth();

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const user = await login(username, password);
            setCurrentUser(user);
            // Redirect or perform other actions after successful login
        } catch (error) {
            console.error('Login failed:', error);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} placeholder="Username" />
            <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" />
            <button type="submit">Login</button>
        </form>
    );
};

export default Login;


// src/components/Logout.js
import React from 'react';
import { logout } from '../services/authService';
import { useAuth } from '../context/AuthContext';

const Logout = () => {
    const { setCurrent User } = useAuth();

    const handleLogout = () => {
        logout();
        setCurrentUser(null);
        // Redirect or perform other actions after successful logout
    };

    return (
        <button onClick={handleLogout}>Logout</button>
    );
};

export default Logout;


// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/AuthContext';
import Login from './components/Login';
import Logout from './components/Logout';
import Dashboard from './components/Dashboard'; // Assuming you have a Dashboard component

const ProtectedRoute = ({ component: Component, ...rest }) => {
    const { currentUser } = useAuth();
    return (
        <Route
            {...rest}
            render={props =>
                currentUser ? (
                    <Component {...props} />
                ) : (
                    <Redirect to="/login" />
                )
            }
        />
    );
};

const App = () => {
    return (
        <AuthProvider>
            <Router>
                <Switch>
                    <Route path="/login" component={Login} />
                    <ProtectedRoute path="/dashboard" component={Dashboard} />
                    {/* Add other routes */}
                </Switch>
            </Router>
        </AuthProvider>
    );
};

export default App;


// src/services/userService.js
import axios from 'axios';

const API_URL = 'http://localhost:4000';

export const getUserDetails = async () => {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user || !user.token) {
        throw new Error('No user logged in');
    }

    const response = await axios.get(`${API_URL}/user`, {
        headers: { Authorization: `Bearer ${user.token}` }
    });
    return response.data;
};


npm install axios jwt-decode
npm install express passport passport-jwt jsonwebtoken bcryptjs cors

