import fs from "fs";
import path from "path";
import dotenv from "dotenv";
dotenv.config();
import { Sequelize } from "sequelize-typescript";
import User from "./user";
import product_data from "./product_data";
import watchlist from "./watchlist";
import favourite from "./favourite";

const initSequalize = () => {
  const sequelize = new Sequelize({
    database: process.env.DATABASE,
    username: process.env.DBUSER,
    password: process.env.DBPASSWORD,
    host: process.env.HOST,
    dialect: "mysql",
    port: 3306,
    models: [User, product_data, watchlist, favourite],
  });

  sequelize
    .authenticate()
    .then(() => console.log(`Successfully connected to database!`))
    .catch((err) => console.log(`Something went wrong ${err.message}`));

  return sequelize;
};

const db = {
  connect: initSequalize(),
};

export default db;



'use strict';
import { Table, Column, Model, DataType, PrimaryKey, AutoIncrement, Default } from 'sequelize-typescript';
import { UserAttributes } from '../interface';
import { Optional } from 'sequelize';

interface Data22 extends Optional<UserAttributes, "user_id"> {}

@Table({ tableName: "Users" })
export default class User extends Model<Data22> {
  @PrimaryKey
  @AutoIncrement
  @Column(DataType.INTEGER)
  user_id!: number;

  @Column(DataType.STRING)
  fname!: string;

  @Column(DataType.STRING)
  lname!: string;

  @Column(DataType.STRING)
  email!: string;

  @Column(DataType.STRING)
  phone!: string;

  @Column(DataType.STRING)
  gender!: string;

  @Column(DataType.DATEONLY)
  bd!: Date;

  @Default(null)
  @Column(DataType.STRING)
  password!: string;

  @Default(null)
  @Column(DataType.STRING)
  access_key!: string;

  @Default(false)
  @Column(DataType.BOOLEAN)
  isdeleted!: boolean;
}


import { Request, Response } from "express";
import User from "../models/user";
import db from "../models/index";

const models = db.connect;

interface ModelsBasics {
  user_id?: number;
  password?: string;
  access_key?: string;
  isdeleted?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
  DeletedAt?: Date | null;
}

interface Data extends ModelsBasics {
  fname: string;
  lname: string;
  email: string;
  phone: string;
  gender: string;
  bd: Date;
}

const register = async (req: Request, res: Response) => {
  const data: Data = {
    fname: "puja",
    lname: "moravadiya",
    email: "puja@abc.com",
    phone: "9878654532",
    gender: "female",
    bd: new Date('2002-11-30')
  };

  try {
    const insertdata = await User.create(data);
    console.log(insertdata);
    res.send("User successfully registered");
  } catch (error) {
    console.log(error);
    res.status(500).send("Registration unsuccessful");
  }
};

export default { register };
